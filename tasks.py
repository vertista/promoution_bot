# -*- coding: utf-8 -*-
# –≠—Ç–æ—Ç "—Ä–∞–±–æ—á–∏–π" —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ.
# –ï–≥–æ –∑–∞–¥–∞—á–∞ - –±—Ä–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∏—Ö.
# –ï—Å–ª–∏ –æ–Ω —É–ø–∞–¥–µ—Ç, –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.

import os
import time
import json
import redis
import aiohttp
# ... (–í—Å–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: re, bs4, googleapiclient) ...

from dotenv import load_dotenv

# --- CONFIGURATION ---
load_dotenv()
TOKEN = os.getenv("TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
# ... (YOUTUBE_API_KEY) ...

# --- REDIS CONNECTION ---
# Redis - —ç—Ç–æ –Ω–∞—à–∞ "–æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á"
redis_client = redis.from_url(os.getenv("REDIS_URL", "redis://localhost:6379"))

# --- API & SCRAPING FUNCTIONS ---
async def get_video_stats(url: str) -> dict:
    # ... (–ó–¥–µ—Å—å –Ω–∞—à–∞ –±—ã—Å—Ç—Ä–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è get_video_stats) ...

async def send_admin_report(task, stats):
    # ... (–ó–¥–µ—Å—å –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É) ...

async def main_worker_loop():
    print("‚öôÔ∏è  Worker –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–µ—Ç –∑–∞–¥–∞—á...")
    while True:
        # –ë–µ—Ä–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        task_data = redis_client.blpop("video_tasks")[1]
        task = json.loads(task_data)
        
        print(f"üî• –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –æ—Ç {task['username']}")
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await get_video_stats(task['video_url'])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        await send_admin_report(task, stats)
        
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–ª—è {task['username']} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")

if __name__ == "__main__":
    import asyncio
    asyncio.run(main_worker_loop())
